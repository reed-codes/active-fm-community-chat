{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["function generateCoordinates (i, frequencyData, canvasWidth, canvasHeight) {\n  const barWidth = (canvasWidth / frequencyData.length); // eslint-disable-line no-bitwise\n  const x = ~~(i * barWidth); // eslint-disable-line no-bitwise\n  const y = canvasHeight - ~~(Math.min(255, Math.max(0, frequencyData[i])) * (canvasHeight / 255)); // eslint-disable-line no-bitwise\n\n  return [x, y];\n}\n\nconst html = tagString => document.createRange().createContextualFragment(tagString);\n\nconst template = html(`\n  <style>\n    :host {\n      contain: strict;\n    }\n\n    canvas {\n      width: 100%;\n      height: 100%;\n    }\n  </style>\n  <canvas></canvas>\n`);\n\nexport default class AudioVisualiser extends HTMLElement {\n  constructor () {\n    super();\n\n    this.fillStyle = '#ffffff';\n\n    /** @type {AnalyserNode|null} */\n    this._analyser = null;\n\n    /** @type {ShadowRoot|null} */\n    this._sDOM = null;\n\n    this._animationLoop = 0;\n\n    this.resizeObserver = new ResizeObserver(entry => requestAnimationFrame(() => this.updateCanvasSize(entry)));\n  }\n\n  /**\n   * @param {AnalyserNode} analyser\n   */\n  set analyser (analyser) {\n    if (analyser instanceof AnalyserNode) {\n      this._analyser = analyser;\n    } else {\n      const actualType = typeof analyser;\n\n      throw new TypeError(`Passed in parameter needs to be an AnalyserNode. Was a ${actualType}.`);\n    }\n  }\n\n  static get observedAttributes () {\n    return ['color'];\n  }\n\n  attributeChangedCallback (name, oldValue, newValue) {\n    if (name === 'color' && newValue && newValue !== oldValue) {\n      this.fillStyle = newValue;\n      this.updateCanvasColor();\n    }\n  }\n\n  stop () {\n    cancelAnimationFrame(this.animationLoop);\n\n    this.animationLoop = undefined;\n  }\n\n  start () {\n    const { canvas, canvasContext, _analyser: analyser } = this;\n\n    if (!analyser) {\n      throw new ReferenceError('Analyser has not been set');\n    }\n\n    const { width, height } = canvas;\n    const frequencyData = new Uint8Array(analyser.frequencyBinCount);\n\n    analyser.getByteFrequencyData(frequencyData);\n\n    canvasContext.clearRect(0, 0, width, height);\n    canvasContext.beginPath();\n\n    canvasContext.moveTo(0, height);\n\n    [...new Array(frequencyData.length)]\n      .map((_, i) => generateCoordinates(i, frequencyData, width, height))\n      .concat([[width, height]])\n      .concat([[0, height]])\n      .forEach(([x, y]) => canvasContext.lineTo(x, y));\n\n    canvasContext.closePath();\n    canvasContext.fill();\n\n    this.animationLoop = requestAnimationFrame(this.start.bind(this));\n  }\n\n  /**\n   * @param {ResizeObserverEntry|undefined} entry\n   * @returns {void}\n   */\n  updateCanvasSize (entry) {\n    const { canvas } = this;\n\n    if (canvas instanceof HTMLCanvasElement) {\n      const rect = entry ? entry.contentRect : canvas.getBoundingClientRect();\n      const dpr = window.devicePixelRatio || 1;\n\n      canvas.width = rect.width * dpr;\n      canvas.height = rect.height * dpr;\n    }\n  }\n\n  updateCanvasColor () {\n    if (this.canvasContext) {\n      this.canvasContext.fillStyle = this.fillStyle;\n    }\n  }\n\n  render () {\n    const { _sDOM } = this;\n\n    _sDOM.appendChild(template.cloneNode(true));\n\n    this.canvas = _sDOM.querySelector('canvas');\n    this.canvasContext = this.canvas.getContext('2d');\n\n    this.canvasContext.lineCap = 'round';\n    this.canvasContext.lineJoin = 'round';\n    this.fillStyle = this.getAttribute('color');\n\n    this.resizeObserver.observe(this.canvas);\n  }\n\n  connectedCallback () {\n    this._sDOM = this.attachShadow({ mode: 'closed' });\n\n    this.render();\n    this.updateCanvasSize();\n    this.updateCanvasColor();\n  }\n}\n\ncustomElements.define('audio-visualiser', AudioVisualiser);\n"],
  "mappings": "AAAA,WAA8B,EAAG,EAAe,EAAa,EAAc,CACzE,GAAM,GAAY,EAAc,EAAc,OACxC,EAAI,CAAC,CAAE,GAAI,GACX,EAAI,EAAe,CAAC,CAAE,MAAK,IAAI,IAAK,KAAK,IAAI,EAAG,EAAc,KAAQ,GAAe,MAE3F,MAAO,CAAC,EAAG,GAGb,GAAM,GAAO,GAAa,SAAS,cAAc,yBAAyB,GAEpE,EAAW,EAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GActB,eAA6C,YAAY,CACvD,aAAe,CACb,QAEA,KAAK,UAAY,UAGjB,KAAK,UAAY,KAGjB,KAAK,MAAQ,KAEb,KAAK,eAAiB,EAEtB,KAAK,eAAiB,GAAI,gBAAe,GAAS,sBAAsB,IAAM,KAAK,iBAAiB,QAMlG,UAAU,EAAU,CACtB,GAAI,YAAoB,cACtB,KAAK,UAAY,MACZ,CACL,GAAM,GAAa,MAAO,GAE1B,KAAM,IAAI,WAAU,0DAA0D,iBAIvE,qBAAsB,CAC/B,MAAO,CAAC,SAGV,yBAA0B,EAAM,EAAU,EAAU,CAClD,AAAI,IAAS,SAAW,GAAY,IAAa,GAC/C,MAAK,UAAY,EACjB,KAAK,qBAIT,MAAQ,CACN,qBAAqB,KAAK,eAE1B,KAAK,cAAgB,OAGvB,OAAS,CACP,GAAM,CAAE,SAAQ,gBAAe,UAAW,GAAa,KAEvD,GAAI,CAAC,EACH,KAAM,IAAI,gBAAe,6BAG3B,GAAM,CAAE,QAAO,UAAW,EACpB,EAAgB,GAAI,YAAW,EAAS,mBAE9C,EAAS,qBAAqB,GAE9B,EAAc,UAAU,EAAG,EAAG,EAAO,GACrC,EAAc,YAEd,EAAc,OAAO,EAAG,GAExB,CAAC,GAAG,GAAI,OAAM,EAAc,SACzB,IAAI,CAAC,EAAG,IAAM,EAAoB,EAAG,EAAe,EAAO,IAC3D,OAAO,CAAC,CAAC,EAAO,KAChB,OAAO,CAAC,CAAC,EAAG,KACZ,QAAQ,CAAC,CAAC,EAAG,KAAO,EAAc,OAAO,EAAG,IAE/C,EAAc,YACd,EAAc,OAEd,KAAK,cAAgB,sBAAsB,KAAK,MAAM,KAAK,OAO7D,iBAAkB,EAAO,CACvB,GAAM,CAAE,UAAW,KAEnB,GAAI,YAAkB,mBAAmB,CACvC,GAAM,GAAO,EAAQ,EAAM,YAAc,EAAO,wBAC1C,EAAM,OAAO,kBAAoB,EAEvC,EAAO,MAAQ,EAAK,MAAQ,EAC5B,EAAO,OAAS,EAAK,OAAS,GAIlC,mBAAqB,CACnB,AAAI,KAAK,eACP,MAAK,cAAc,UAAY,KAAK,WAIxC,QAAU,CACR,GAAM,CAAE,SAAU,KAElB,EAAM,YAAY,EAAS,UAAU,KAErC,KAAK,OAAS,EAAM,cAAc,UAClC,KAAK,cAAgB,KAAK,OAAO,WAAW,MAE5C,KAAK,cAAc,QAAU,QAC7B,KAAK,cAAc,SAAW,QAC9B,KAAK,UAAY,KAAK,aAAa,SAEnC,KAAK,eAAe,QAAQ,KAAK,QAGnC,mBAAqB,CACnB,KAAK,MAAQ,KAAK,aAAa,CAAE,KAAM,WAEvC,KAAK,SACL,KAAK,mBACL,KAAK,sBAtHF,EAAP,EA0HA,eAAe,OAAO,mBAAoB",
  "names": []
}
