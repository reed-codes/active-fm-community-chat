function l(i,t,e,n){let a=e/t.length,s=~~(i*a),o=n-~~(Math.min(255,Math.max(0,t[i]))*(n/255));return[s,o]}var d=i=>document.createRange().createContextualFragment(i),u=d(`
  <style>
    :host {
      contain: strict;
    }

    canvas {
      width: 100%;
      height: 100%;
    }
  </style>
  <canvas></canvas>
`),r=class extends HTMLElement{constructor(){super();this.fillStyle="#ffffff",this._analyser=null,this._sDOM=null,this._animationLoop=0,this.resizeObserver=new ResizeObserver(t=>requestAnimationFrame(()=>this.updateCanvasSize(t)))}set analyser(t){if(t instanceof AnalyserNode)this._analyser=t;else{let e=typeof t;throw new TypeError(`Passed in parameter needs to be an AnalyserNode. Was a ${e}.`)}}static get observedAttributes(){return["color"]}attributeChangedCallback(t,e,n){t==="color"&&n&&n!==e&&(this.fillStyle=n,this.updateCanvasColor())}stop(){cancelAnimationFrame(this.animationLoop),this.animationLoop=void 0}start(){let{canvas:t,canvasContext:e,_analyser:n}=this;if(!n)throw new ReferenceError("Analyser has not been set");let{width:a,height:s}=t,o=new Uint8Array(n.frequencyBinCount);n.getByteFrequencyData(o),e.clearRect(0,0,a,s),e.beginPath(),e.moveTo(0,s),[...new Array(o.length)].map((h,c)=>l(c,o,a,s)).concat([[a,s]]).concat([[0,s]]).forEach(([h,c])=>e.lineTo(h,c)),e.closePath(),e.fill(),this.animationLoop=requestAnimationFrame(this.start.bind(this))}updateCanvasSize(t){let{canvas:e}=this;if(e instanceof HTMLCanvasElement){let n=t?t.contentRect:e.getBoundingClientRect(),a=window.devicePixelRatio||1;e.width=n.width*a,e.height=n.height*a}}updateCanvasColor(){this.canvasContext&&(this.canvasContext.fillStyle=this.fillStyle)}render(){let{_sDOM:t}=this;t.appendChild(u.cloneNode(!0)),this.canvas=t.querySelector("canvas"),this.canvasContext=this.canvas.getContext("2d"),this.canvasContext.lineCap="round",this.canvasContext.lineJoin="round",this.fillStyle=this.getAttribute("color"),this.resizeObserver.observe(this.canvas)}connectedCallback(){this._sDOM=this.attachShadow({mode:"closed"}),this.render(),this.updateCanvasSize(),this.updateCanvasColor()}},f=r;customElements.define("audio-visualiser",r);export{f as default};
//# sourceMappingURL=index.js.map
